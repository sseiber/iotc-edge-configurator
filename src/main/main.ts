import { app, BrowserWindow, ipcMain, IpcMainInvokeEvent } from 'electron';
import store, { StoreKeys } from './store';
import { logger } from './logger';
import MenuBuilder from './menu';
import { join as pathJoin } from 'path';
import { platform as osPlatform } from 'os';
import {
    // ipcApiLog,
    ipcApiMsalConfig,
    IMsalConfig
} from './contextBridge';
// import { AuthProvider } from '../../authProvider';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const ModuleName = 'main';

// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true';

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    // eslint-disable-line global-require
    app.quit();
}

logger([ModuleName, 'info'], `Starting main module...`);

ipcMain.handle('log', async (_event: IpcMainInvokeEvent, tags: string[], message: string): Promise<void> => {
    logger(tags, message);
});

ipcMain.handle(ipcApiMsalConfig, async (_event: IpcMainInvokeEvent, msalConfig: IMsalConfig): Promise<void> => {
    store.set(StoreKeys.clientId, msalConfig.clientId);
    store.set(StoreKeys.tenantId, msalConfig.tenantId);
    store.set(StoreKeys.redirectUri, msalConfig.redirectUri);
    store.set(StoreKeys.aadEndpointHost, msalConfig.aadEndpointHost);
    store.set(StoreKeys.graphEndpointHost, msalConfig.graphEndpointHost);
    store.set(StoreKeys.graphMeEndpoint, msalConfig.graphMeEndpoint);
    store.set(StoreKeys.graphScopes, msalConfig.graphScopes);
});

let mainWindow: BrowserWindow;

const createWindow = (): void => {
    // Create the browser window.
    mainWindow = new BrowserWindow({
        width: 1024,
        height: 728,
        icon: pathJoin('/assets', osPlatform() === 'win32' ? 'icons/icon.ico' : 'icons/64x64.png'),
        webPreferences: {
            contextIsolation: true,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
        }
    });

    // and load the index.html of the app.
    void mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    const menuBuilder = new MenuBuilder(mainWindow);
    menuBuilder.buildMenu();

    // Open the DevTools.
    mainWindow.webContents.openDevTools();

    logger([ModuleName, 'info'], `electronStore value 'clientId': ${store.get(StoreKeys.clientId)}`);
};

// const authProvider = new AuthProvider(ipcMain, mainWindow);
// authProvider.initialize();

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});
