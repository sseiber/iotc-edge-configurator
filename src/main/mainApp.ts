import { App, BrowserWindow, ipcMain, IpcMainInvokeEvent } from 'electron';
import store, { StoreKeys } from './store';
import logger from './logger';
import MenuBuilder from './menu';
import { join as pathJoin } from 'path';
import { platform as osPlatform } from 'os';
import { IMsalConfig, AuthProvider } from './authProvider/authProvider';
import {
    Ipc_Log,
    Ipc_MsalConfig,
    Ipc_Signin,
    Ipc_Signout,
    Ipc_GetAccount,
    Ipc_GetProfile
} from './contextBridgeTypes';
import { AccountInfo } from '@azure/msal-node';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const ModuleName = 'MainApp';

export class MainApp {
    private electronApp: App;
    private mainWindow: BrowserWindow = null;
    private authProvider: AuthProvider = null;

    constructor(electronApp: App) {
        this.electronApp = electronApp;

        this.registerEventHandlers();
    }

    public async initializeApp(): Promise<void> {
        logger.log([ModuleName, 'info'], `MAIN_WINDOW_WEBPACK_ENTRY: ${MAIN_WINDOW_WEBPACK_ENTRY}`);
        logger.log([ModuleName, 'info'], `MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: ${MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY}`);

        // Create the main browser window
        this.createMainWindow();

        const menuBuilder = new MenuBuilder(this.mainWindow);
        menuBuilder.buildMenu();

        this.authProvider = new AuthProvider();
        await this.authProvider.initialize();

        this.mainWindow.once('ready-to-show', () => {
            this.mainWindow.show();
            // this.mainWindow.webContents.openDevTools();
        });

        // and load the index.html of the app
        await this.mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    }

    public createMainWindow(): void {
        logger.log([ModuleName, 'info'], `createMainWindow`);

        this.mainWindow = new BrowserWindow({
            width: 1280,
            height: 768,
            show: false,
            icon: pathJoin(this.getAssetsPath(), osPlatform() === 'win32' ? 'icon.ico' : 'icons/64x64.png'),
            webPreferences: {
                // nodeIntegration: true,
                contextIsolation: true,
                preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
            }
        });
    }

    private getAssetsPath(): string {
        return this.electronApp.isPackaged
            ? pathJoin(process.resourcesPath, 'assets')
            : pathJoin(__dirname, '../renderer/assets');
    }

    private registerEventHandlers(): void {
        // ContextBridge event handlers

        ipcMain.handle(Ipc_Log, async (_event: IpcMainInvokeEvent, tags: string[], message: string): Promise<void> => {
            logger.log(tags, message);
        });

        ipcMain.handle(Ipc_MsalConfig, async (_event: IpcMainInvokeEvent, msalConfig: IMsalConfig): Promise<void> => {
            logger.log([ModuleName, 'info'], `ipcMain ${Ipc_MsalConfig} handler`);

            store.set(StoreKeys.clientId, msalConfig.clientId);
            store.set(StoreKeys.tenantId, msalConfig.tenantId);
            store.set(StoreKeys.redirectUri, msalConfig.redirectUri);
            store.set(StoreKeys.aadEndpointHost, msalConfig.aadEndpointHost);
            store.set(StoreKeys.graphEndpointHost, msalConfig.graphEndpointHost);
            store.set(StoreKeys.graphMeEndpoint, msalConfig.graphMeEndpoint);
            store.set(StoreKeys.tokenCachePath, msalConfig.tokenCachePath);
            store.set(StoreKeys.tokenCacheName, msalConfig.tokenCacheName);
            store.set(StoreKeys.appProtocolName, msalConfig.appProtocolName);
        });

        ipcMain.handle(Ipc_Signin, async (_event: IpcMainInvokeEvent): Promise<AccountInfo> => {
            logger.log([ModuleName, 'info'], `ipcMain ${Ipc_Signin} handler`);

            // use a separate window for a pop-up login ui experience
            // const authWindow = this.createAuthWindow();

            const accountInfo = await this.authProvider.signin(this.mainWindow);

            await this.mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

            // authWindow.close();

            return accountInfo;
        });

        ipcMain.handle(Ipc_Signout, async (_event: IpcMainInvokeEvent): Promise<void> => {
            logger.log([ModuleName, 'info'], `ipcMain ${Ipc_Signout} handler`);

            await this.authProvider.signout();

            // await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
        });

        ipcMain.handle(Ipc_GetAccount, async (_event: IpcMainInvokeEvent): Promise<AccountInfo> => {
            logger.log([ModuleName, 'info'], `ipcMain ${Ipc_GetAccount} handler`);

            const foo = this.authProvider?.currentAccount;

            return foo;
        });

        ipcMain.handle(Ipc_GetProfile, async (_event: IpcMainInvokeEvent): Promise<any> => {
            logger.log([ModuleName, 'info'], `ipcMain ${Ipc_GetProfile} handler`);

            const token = await this.authProvider.getProfileToken(this.mainWindow);
            // const account = this.authProvider.currentAccount;

            await this.mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

            // Main.publish(IPC_MESSAGES.SHOW_WELCOME_MESSAGE, account);

            const graphResponse = await this.authProvider.callEndpointWithToken(`${store.get(StoreKeys.graphEndpointHost)}${store.get(StoreKeys.graphMeEndpoint)}`, token);

            return graphResponse;
        });
    }

    // private createAuthWindow(): BrowserWindow {
    //     logger.log([ModuleName, 'info'], `createAuthWindow`);

    //     const window = new BrowserWindow({
    //         width: 400,
    //         height: 600
    //     });

    //     window.on('closed', () => {
    //         logger.log([ModuleName, 'info'], `Main window received 'close'`);

    //         this.mainWindow = null;
    //     });

    //     return window;
    // }
}
